name: CI

env:
  DOCS_ONLY_PATTERNS: '\.md$|^docs/|^VERSION'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  changes:
    name: Detect Docs-only Changes
    runs-on: ubuntu-latest
    outputs:
      docs_only: ${{ steps.filter.outputs.docs_only }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Detect changed files
        id: filter
        run: |
          git fetch origin main
          changed_files=$(git diff --name-only origin/main...HEAD)
          echo "Changed files:"
          echo "$changed_files"
          if echo "$changed_files" | grep -vqE "${DOCS_ONLY_PATTERNS}"; then
            echo "docs_only=false" >> $GITHUB_OUTPUT
          else
            echo "docs_only=true" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs_only != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm dlx turbo run build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/static
            .next/standalone
            dist
          key: ${{ runner.os }}-build-${{ github.sha }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs_only != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm dlx turbo run test -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Run Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install

      - name: Run lint
        run: pnpm dlx turbo run lint

  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install

      - name: Check formatting
        run: pnpm dlx turbo run format:check

  e2e:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: [build, changes]
    if: needs.changes.outputs.docs_only != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install

      - name: Build CLI
        run: pnpm run cli:build

      - name: Run E2E snapshot tests
        run: pnpm run test:e2e:snapshots

  # Summary job that depends on all others
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [build, test, lint, format, e2e]
    if: always()

    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.build.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.lint.result }}" == "success" && \
                "${{ needs.format.result }}" == "success" && \
                "${{ needs.e2e.result }}" == "success" ]]; then
            echo "✅ All CI jobs passed!"
            exit 0
          else
            echo "❌ Some CI jobs failed:"
            echo "  Build: ${{ needs.build.result }}"
            echo "  Test: ${{ needs.test.result }}"
            echo "  Lint: ${{ needs.lint.result }}"
            echo "  Format: ${{ needs.format.result }}"
            echo "  E2E: ${{ needs.e2e.result }}"
            exit 1
          fi
