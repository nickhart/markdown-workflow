{
  "info": {
    "name": "Presentation API Demo",
    "description": "API endpoints for the markdown-workflow presentation generator demo",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "presentation-demo-api",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "Base URL for the presentation API"
    },
    {
      "key": "collectionId",
      "value": "",
      "type": "string",
      "description": "Collection ID returned from create endpoint"
    }
  ],
  "item": [
    {
      "name": "1. Get Available Templates",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has templates array', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('templates');",
              "    pm.expect(jsonData.templates).to.be.an('array');",
              "});",
              "",
              "pm.test('Templates have required properties', function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.templates.length > 0) {",
              "        const template = jsonData.templates[0];",
              "        pm.expect(template).to.have.property('name');",
              "        pm.expect(template).to.have.property('displayName');",
              "        pm.expect(template).to.have.property('content');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/presentations/templates",
          "host": ["{{baseUrl}}"],
          "path": ["api", "presentations", "templates"]
        },
        "description": "Retrieves all available presentation templates with their content"
      },
      "response": [
        {
          "name": "Success Response",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/presentations/templates",
              "host": ["{{baseUrl}}"],
              "path": ["api", "presentations", "templates"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"templates\": [\n    {\n      \"name\": \"default\",\n      \"displayName\": \"Default\",\n      \"content\": \"---\\ntitle: '{{title}}'\\nauthor: '{{user.name}}'\\n...\"\n    }\n  ],\n  \"count\": 1\n}"
        }
      ]
    },
    {
      "name": "2. Create New Presentation",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains collection ID', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('collectionId');",
              "    pm.expect(jsonData.collectionId).to.be.a('string');",
              "    pm.expect(jsonData.collectionId).to.not.be.empty;",
              "    ",
              "    // Store collection ID for subsequent requests",
              "    pm.collectionVariables.set('collectionId', jsonData.collectionId);",
              "});",
              "",
              "pm.test('Response indicates success', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData.success).to.be.true;",
              "});",
              "",
              "pm.test('Response contains template content', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('templateContent');",
              "    pm.expect(jsonData.templateContent).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"API Test Presentation\",\n  \"templateName\": \"default\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/api/presentations/create",
          "host": ["{{baseUrl}}"],
          "path": ["api", "presentations", "create"]
        },
        "description": "Creates a new presentation collection using the specified template"
      },
      "response": [
        {
          "name": "Success Response",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"API Test Presentation\",\n  \"templateName\": \"default\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/presentations/create",
              "host": ["{{baseUrl}}"],
              "path": ["api", "presentations", "create"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": true,\n  \"collectionId\": \"api_test_presentation_20250801\",\n  \"stage\": \"draft\",\n  \"templateContent\": \"# API Test Presentation\\n\\n## Overview...\",\n  \"message\": \"Presentation created successfully\"\n}"
        }
      ]
    },
    {
      "name": "3. Format Presentation to PPTX",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response indicates success', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData.success).to.be.true;",
              "});",
              "",
              "pm.test('Response contains download URL', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('downloadUrl');",
              "    pm.expect(jsonData.downloadUrl).to.be.a('string');",
              "    pm.expect(jsonData.downloadUrl).to.not.be.empty;",
              "});",
              "",
              "pm.test('Response contains file size', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('fileSize');",
              "    pm.expect(jsonData.fileSize).to.be.a('number');",
              "    pm.expect(jsonData.fileSize).to.be.above(0);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"collectionId\": \"{{collectionId}}\",\n  \"content\": \"# Modified Presentation Content\\n\\n## Overview\\nThis is modified content for testing the API.\\n\\n## Solution Architecture\\n\\n```mermaid:test-diagram {align=center, width=80%, layout=horizontal}\\nflowchart LR\\n    A[Start] --> B[Process]\\n    B --> C[End]\\n    \\n    style A fill:#e1f5fe\\n    style C fill:#c8e6c9\\n```\\n\\n## Conclusion\\nAPI formatting test complete.\",\n  \"mermaidOptions\": {\n    \"theme\": \"default\",\n    \"output_format\": \"png\",\n    \"timeout\": 30\n  }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/api/presentations/format",
          "host": ["{{baseUrl}}"],
          "path": ["api", "presentations", "format"]
        },
        "description": "Formats the presentation collection to PPTX with optional custom content and Mermaid options"
      },
      "response": [
        {
          "name": "Success Response",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"collectionId\": \"api_test_presentation_20250801\",\n  \"content\": \"# Modified Content...\",\n  \"mermaidOptions\": {\n    \"theme\": \"default\",\n    \"output_format\": \"png\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/presentations/format",
              "host": ["{{baseUrl}}"],
              "path": ["api", "presentations", "format"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": true,\n  \"downloadUrl\": \"/api/presentations/download/api_test_presentation_20250801\",\n  \"message\": \"Presentation formatted successfully\",\n  \"fileSize\": 45678\n}"
        }
      ]
    },
    {
      "name": "4. Download PPTX File",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is PPTX file', function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/vnd.openxmlformats-officedocument.presentationml.presentation');",
              "});",
              "",
              "pm.test('Response has attachment header', function () {",
              "    const contentDisposition = pm.response.headers.get('Content-Disposition');",
              "    pm.expect(contentDisposition).to.include('attachment');",
              "    pm.expect(contentDisposition).to.include('.pptx');",
              "});",
              "",
              "pm.test('Response has content length', function () {",
              "    const contentLength = pm.response.headers.get('Content-Length');",
              "    pm.expect(contentLength).to.not.be.null;",
              "    pm.expect(parseInt(contentLength)).to.be.above(0);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/presentations/download/{{collectionId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "presentations", "download", "{{collectionId}}"]
        },
        "description": "Downloads the generated PPTX file for the presentation"
      },
      "response": [
        {
          "name": "Success Response (Binary File)",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/presentations/download/api_test_presentation_20250801",
              "host": ["{{baseUrl}}"],
              "path": ["api", "presentations", "download", "api_test_presentation_20250801"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "text",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/vnd.openxmlformats-officedocument.presentationml.presentation"
            },
            {
              "key": "Content-Disposition",
              "value": "attachment; filename=\"api_test_presentation_20250801.pptx\""
            },
            {
              "key": "Content-Length",
              "value": "45678"
            }
          ],
          "cookie": [],
          "body": "[Binary PPTX file content]"
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Running request to:', pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "console.log('Response time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ]
}