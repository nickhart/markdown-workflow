/**
 * Emoji processor
 * Converts emoji shortcodes like :rocket: to Unicode emoji üöÄ
 *
 * Uses GitHub's standard emoji shortcode names as the primary mapping,
 * with additional convenient aliases for frequently used emojis.
 *
 * Standard names source: https://api.github.com/emojis
 */

import * as fs from 'fs';
import {
  BaseProcessor,
  ProcessorBlock,
  ProcessingContext,
  ProcessingResult,
} from './base-processor.js';

// GitHub standard emoji mappings with convenient aliases
// Priority: GitHub standard names first, then convenient aliases for frequently used emojis
const EMOJI_MAP: Record<string, string> = {
  // === BASIC EMOJI (GitHub standard) ===
  ':rocket:': 'üöÄ',
  ':star:': '‚≠ê',
  ':fire:': 'üî•',
  ':heart:': '‚ù§Ô∏è',
  ':thumbsup:': 'üëç',
  ':thumbsdown:': 'üëé',
  ':warning:': '‚ö†Ô∏è',
  ':information_source:': '‚ÑπÔ∏è',
  ':gear:': '‚öôÔ∏è',

  // === CONVENIENT ALIASES ===
  ':thumbs_up:': 'üëç', // alias for :thumbsup:
  ':thumbs_down:': 'üëé', // alias for :thumbsdown:
  ':info:': '‚ÑπÔ∏è', // alias for :information_source:
  ':check:': '‚úÖ',
  ':white_check_mark:': '‚úÖ',
  ':x:': '‚ùå',
  ':lightbulb:': 'üí°',
  ':folder:': 'üìÇ',
  ':file:': 'üìÑ',
  ':link:': 'üîó',
  ':key:': 'üîë',
  ':lock:': 'üîí',
  ':unlock:': 'üîì',
  ':search:': 'üîç',
  ':clock:': 'üïê',
  ':calendar:': 'üìÖ',
  ':email:': 'üìß',
  ':phone:': 'üìû',
  ':computer:': 'üíª',
  ':mobile:': 'üì±',
  ':cloud:': '‚òÅÔ∏è',
  ':sun:': '‚òÄÔ∏è',
  ':moon:': 'üåô',
  ':earth:': 'üåç',
  ':tree:': 'üå≥',
  ':hammer:': 'üî®',
  ':wrench:': 'üîß',
  ':scissors:': '‚úÇÔ∏è',
  ':pencil:': '‚úèÔ∏è',
  ':paintbrush:': 'üñåÔ∏è',
  ':art:': 'üé®',
  ':music:': 'üéµ',
  ':camera:': 'üì∑',
  ':video:': 'üìπ',
  ':game:': 'üéÆ',
  ':gift:': 'üéÅ',
  ':trophy:': 'üèÜ',
  ':medal:': 'üèÖ',
  ':flag:': 'üö©',
  ':bookmark:': 'üîñ',
  ':tag:': 'üè∑Ô∏è',
  ':package:': 'üì¶',
  ':box:': 'üì¶',
  ':truck:': 'üöö',
  ':car:': 'üöó',
  ':plane:': '‚úàÔ∏è',
  ':ship:': 'üö¢',
  ':train:': 'üöÑ',
  ':house:': 'üè†',
  ':office:': 'üè¢',
  ':school:': 'üè´',
  ':hospital:': 'üè•',
  ':bank:': 'üè¶',
  ':store:': 'üè™',
  ':restaurant:': 'üçΩÔ∏è',
  ':pizza:': 'üçï',
  ':takeout_box:': 'ü•°',
  ':coffee:': '‚òï',
  ':beer:': 'üç∫',
  ':wine:': 'üç∑',
  ':cake:': 'üéÇ',
  ':apple:': 'üçé',
  ':banana:': 'üçå',
  ':grapes:': 'üçá',
  ':bread:': 'üçû',
  ':cheese:': 'üßÄ',
  ':egg:': 'ü•ö',
  ':fish:': 'üêü',
  ':chicken:': 'üêî',
  ':cow:': 'üêÑ',
  ':pig:': 'üê∑',
  ':dog:': 'üêï',
  ':cat:': 'üê±',
  ':mouse:': 'üê≠',
  ':rabbit:': 'üê∞',
  ':bear:': 'üêª',
  ':panda:': 'üêº',
  ':lion:': 'ü¶Å',
  ':tiger:': 'üêÖ',
  ':elephant:': 'üêò',
  ':monkey:': 'üêµ',
  ':bird:': 'üê¶',
  ':penguin:': 'üêß',
  ':snake:': 'üêç',
  ':turtle:': 'üê¢',
  ':frog:': 'üê∏',
  ':octopus:': 'üêô',
  ':butterfly:': 'ü¶ã',
  ':flower:': 'üå∏',
  ':rose:': 'üåπ',
  ':sunflower:': 'üåª',
  ':rainbow:': 'üåà',
  ':snowflake:': '‚ùÑÔ∏è',
  ':zap:': '‚ö°',
  ':boom:': 'üí•',
  ':sparkles:': '‚ú®',
  ':dizzy:': 'üí´',
  ':crown:': 'üëë',
  ':ring:': 'üíç',
  ':gem:': 'üíé',
  ':money:': 'üí∞',
  ':dollar:': 'üíµ',
  ':euro:': 'üí∂',
  ':yen:': 'üí¥',
  ':credit_card:': 'üí≥',
  ':chart:': 'üìä',
  ':graph:': 'üìà',
  ':clipboard:': 'üìã',
  ':newspaper:': 'üì∞',
  ':book:': 'üìö',
  ':notebook:': 'üìì',
  ':page:': 'üìÉ',
  ':scroll:': 'üìú',
  ':memo:': 'üìù',
  ':pushpin:': 'üìå',
  ':round_pushpin:': 'üìç',
  ':triangular_flag:': 'üö©',
  ':crossed_flags:': 'üéå',
  ':waving_flag:': 'üè¥',
  ':pirate_flag:': 'üè¥‚Äç‚ò†Ô∏è',
  ':bust_in_silhouette:': 'üë§',
  ':speech_balloon:': 'üí¨',
  ':world:': 'üåç',
  ':ok_hand:': 'üëå',
  ':muscle:': 'üí™',
  ':clap:': 'üëè',
  ':wave:': 'üëã',
  ':pray:': 'üôè',
  ':point_right:': 'üëâ',
  ':point_left:': 'üëà',
  ':heavy_plus_sign:': '‚ûï',
  ':heavy_minus_sign:': '‚ûñ',
  ':smile:': 'üòä',
  ':electric_plug:': 'üîå',
  ':question:': '‚ùì',
  ':exclamation:': '‚ùó',
};

export class EmojiProcessor extends BaseProcessor {
  readonly name = 'emoji';
  readonly description = 'Convert emoji shortcodes to Unicode emoji';
  readonly version = '1.0.0';
  readonly intermediateExtension = '.emoji.md';
  readonly supportedInputExtensions = ['.md', '.markdown'];
  readonly outputExtensions = ['.md'];
  readonly supportedOutputFormats = ['md', 'markdown'];

  /**
   * Check if content contains emoji shortcodes
   */
  canProcess(content: string): boolean {
    const emojiRegex = /:[a-zA-Z0-9_+-]+:/g;
    return emojiRegex.test(content);
  }

  /**
   * Detect emoji shortcodes in content
   * Note: For this processor, we don't extract specific "blocks" like diagrams,
   * but rather process the entire content
   */
  detectBlocks(content: string): ProcessorBlock[] {
    const emojiRegex = /:[a-zA-Z0-9_+-]+:/g;
    const matches = Array.from(content.matchAll(emojiRegex));

    if (matches.length === 0) {
      return [];
    }

    // Return a single block representing the entire content with emoji processing needed
    return [
      {
        name: 'emoji_content',
        content: content,
        startIndex: 0,
        endIndex: content.length,
        metadata: {
          shortcodes: matches.map((match) => match[0]),
          count: matches.length,
        },
      },
    ];
  }

  /**
   * Process content to convert emoji shortcodes to Unicode emoji
   */
  async process(content: string, context: ProcessingContext): Promise<ProcessingResult> {
    const blocks = this.detectBlocks(content);

    if (blocks.length === 0) {
      return {
        success: true,
        processedContent: content,
        artifacts: [],
        blocksProcessed: 0,
      };
    }

    this.ensureDirectories(context);

    const _block = blocks[0]; // We only have one block for emoji processing
    const intermediateFile = this.getIntermediateFilePath('processed', context);

    // Process emoji shortcodes
    let processedContent = content;
    const replacements: Array<{ shortcode: string; emoji: string; count: number }> = [];

    for (const [shortcode, emoji] of Object.entries(EMOJI_MAP)) {
      const regex = new RegExp(shortcode.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
      const matches = processedContent.match(regex);
      if (matches) {
        processedContent = processedContent.replace(regex, emoji);
        replacements.push({
          shortcode,
          emoji,
          count: matches.length,
        });
      }
    }

    // Check for unrecognized emoji shortcodes
    const unresolvedEmojiRegex = /:[a-zA-Z0-9_+-]+:/g;
    const unresolvedMatches = processedContent.match(unresolvedEmojiRegex);

    if (unresolvedMatches) {
      console.warn(`‚ö†Ô∏è  Unrecognized emoji shortcodes found: ${unresolvedMatches.join(', ')}`);
      // Add comment about unrecognized shortcodes
      processedContent += `\n<!-- Unrecognized emoji shortcodes: ${unresolvedMatches.join(', ')} -->`;
    }

    // Write intermediate file for debugging
    const contentChanged = this.hasContentChanged(intermediateFile, processedContent);

    if (contentChanged) {
      fs.writeFileSync(intermediateFile, processedContent, 'utf8');
      console.info(
        `üìù Updated emoji intermediate file with ${replacements.length} types of replacements`,
      );
    } else {
      console.info(`‚è≠Ô∏è  Skipped emoji intermediate file (unchanged)`);
    }

    // Log replacements
    if (replacements.length > 0) {
      console.info(
        `üòÄ Converted ${replacements.reduce((sum, r) => sum + r.count, 0)} emoji shortcodes:`,
      );
      for (const replacement of replacements.slice(0, 5)) {
        // Show first 5
        console.info(`   ${replacement.shortcode} ‚Üí ${replacement.emoji} (${replacement.count}x)`);
      }
      if (replacements.length > 5) {
        console.info(`   ... and ${replacements.length - 5} more types`);
      }
    }

    const artifacts = [
      {
        name: 'processed.emoji.md',
        path: intermediateFile,
        relativePath: this.getRelativePath(intermediateFile, context),
        type: 'intermediate' as const,
      },
    ];

    return {
      success: true,
      processedContent,
      artifacts,
      blocksProcessed: 1,
    };
  }

  /**
   * Add a new emoji mapping
   */
  addEmojiMapping(shortcode: string, emoji: string): void {
    EMOJI_MAP[shortcode] = emoji;
  }

  /**
   * Get all supported emoji shortcodes
   */
  getSupportedShortcodes(): string[] {
    return Object.keys(EMOJI_MAP).sort();
  }

  /**
   * Get emoji for a specific shortcode
   */
  getEmoji(shortcode: string): string | undefined {
    return EMOJI_MAP[shortcode];
  }
}
